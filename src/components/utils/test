"use client";
import type { NextPage } from "next";
import { useFormik } from "formik";
import * as Yup from "yup";
import { registerrdv } from '../../app/services';
import Modal from 'react-modal';
import { useRouter } from "next/navigation";
import { css } from "@emotion/react";
import { BeatLoader } from "react-spinners";
import { list } from "postcss";
import React, { useState, useEffect } from 'react';
import axios from 'axios';
  

const override = css`
  display: block;
  margin: 0 auto;
`;

const messageRdv=(status:string,message:string,data:string)=>{
    messageError:[{
      status:"status",
      message:"message",
      data:"data",
    }]

}


// Yup schema to validate the form
const schema = Yup.object().shape({
  name: Yup.string().required(),
  profession: Yup.string().required(),
  email: Yup.string().required().email(),
  date: Yup.string().required(),
  time: Yup.string().required(),
  weight: Yup.string(),
  reminder: Yup.string(),
  notes: Yup.string(),

});

const RegisterRdvForm: NextPage = () =>{
  const [successMessage, setSuccessMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  // Formik hook to handle the form state
  const formik = useFormik({
    initialValues: {
      // name: "",
      // profession: "",
      // email: "",
      date: "",
      time: "",
      weight: "",
      reminder: "",
      notes: "",
    },

    // Pass the Yup schema to validate the form
    validationSchema: schema,

    onSubmit: async ({ date, time, weight,reminder,notes}) => {
      try {
        const response = await registerrdv({  date, time ,weight,reminder,notes});
        setIsLoading(true); 
        if (response) {
          messageRdv("success","Enregistrement réussie !",response)
          // setSuccessMessage('Enregistrement réussie !');
          router.replace("rdv/rdv-list");
        } else {
          // setErrorMessage('Erreur de l\'enregistrement.');
          messageRdv("error","Erreur de l\'enregistrement!" ,"")

        }
      } catch (error) {
        console.error(error);
        messageRdv("error","Erreur lors de la communication avec le serveur!" ,"")
        // setErrorMessage('Erreur lors de la communication avec le serveur.');
      }finally {
        setIsLoading(false); // Désactiver le loader
      }
    },
  });

  // Destructure the formik object
  const { errors, touched, values, handleChange, handleSubmit } = formik;
  
    const [medecins, setMedecins] = useState([]);
  
    useEffect(() => {
      const fetchMedecins = async () => {
        try {
          const response = await axios.get('http://localhost:8000/api/v1/rdv/medecins/');
          setMedecins(response.data);
        } catch (error) {
          console.error(error);
        }
      };
  
      fetchMedecins();
    }, []);

    
  return (
    <div className="border-blue-400 mt-16">
    <div className="grid place-items-center h-screen">
      <div className="shadow-lg p-5 rounded-lg border-t-4 border-green-400 bg-gray-50">
        <h1 className="text-xl font-bold my-4">Enregistrer un rendez-vous medical</h1>

        <button className="bg-green-600 text-white font-bold rounded-full cursor-pointer px-6 py-2 mb-4">
          {isLoading ? (
            <BeatLoader color={"#ffffff"} loading={isLoading} css={override} size={10} isOpen={true}/>
          ) : (
            "Selectionner votre medecin"
          )}
          
          </button>
          <Modal isOpen={true}
          style={{
            overlay: {
              backgroundColor: 'rgba(0, 0, 0, 0.6)',
            },
            content: {
              top: '50%',
              left: '50%',
              right: 'auto',
              bottom: 'auto',
              marginRight: '-50%',
              transform: 'translate(-50%, -50%)',
            },
          }}>
        <div>
      <h1 className="text-2xl font-bold mb-4">Liste des médecins</h1>
      <table className="border-collapse w-full">
        <thead>
          <tr>
            <th className="py-2 px-4 border-b">Nom</th>
            <th className="py-2 px-4 border-b">Profession</th>
            <th className="py-2 px-4 border-b">Téléphone</th>
            <th className="py-2 px-4 border-b">Email</th>
            <th className="py-2 px-4 border-b">Actions</th> {/* Nouvelle colonne pour les actions */}
          </tr>
        </thead>
        <tbody>
          {medecins.map((medecin) => (
            <tr key={medecin.id}>
              <td className="py-2 px-4 border-b">{medecin.name}</td>
              <td className="py-2 px-4 border-b">{medecin.profession}</td>
              <td className="py-2 px-4 border-b">{medecin.phone_number}</td>
              <td className="py-2 px-4 border-b">{medecin.email}</td>
              <td className="py-2 px-4 border-b">
                <button
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                  onClick={() => handleSelectMedecin(medecin)}
                >
                  Sélectionner
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      
    </div>
  
      </Modal>
        <form onSubmit={handleSubmit} className="flex flex-col gap-3">
          {/* <input
            type="text"
            name="name"
            value={values.name}
            onChange={handleChange}
            id="name"
            placeholder="name"
          />
          {errors.name && touched.name && <span className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">{errors.name}</span>}

          <select onChange={handleChange}
            name="profession"
            value={values.profession}
            id="profession"
            >
            <option value="">Sélectionnez le medecin</option>
            <option value="Gynecologue">Gynecologue</option>
            <option value="Visiteur medical">Visiteur medical</option>
            <option value="Sage-femme">Sage-femme</option>
            <option value="Infirmiere">Infirmiere</option>
            <option value="Obstetricien">Obstetricien</option>
            <option value="Autre">Autre</option>
            <option value="Pediatre">Pediatre</option>
            <option value="Kinesitherapeute">Kinesitherapeute</option>
            <option value="Echographiste">Echographiste</option>
          </select>
          {errors.profession && touched.profession && <span className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">{errors.profession}</span>}

            <input
            type="email"
            name="email"
            value={values.email}
            onChange={handleChange}
            id="email"
            placeholder="Email"
            />
          {errors.email && touched.email && <span className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">{errors.email}</span>} */}
          <input
             type="date"
             name="date"
             value={values.date}
             onChange={handleChange}
             id="date"
             placeholder="date"
             />
           {errors.date && touched.date && <span className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">{errors.date}</span>}
          <input
             type="time"
             name="time"
             value={values.time}
             onChange={handleChange}
             id="time"
             placeholder="time"
             />
           {errors.time && touched.time && <span className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">{errors.time}</span>}
           
          <input
             type="weight"
             name="weight"
             value={values.weight}
             onChange={handleChange}
             id="weight"
             placeholder="weight"
             />
           {errors.weight && touched.weight && <span className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">{errors.weight}</span>}
          {/* <label htmlFor="note">note</label> */}
          <textarea
          className="b-black"
           name="notes"
           value={values.notes}
           onChange={handleChange}
           id="notes"
           placeholder="notes"
          
          />
          <div className="flex"> 
          <label htmlFor="Me rappeler">Me rappeler</label>
          <input className="flex"
            type="checkbox"
            name="reminder"
            value={values.reminder}
            onChange={handleChange}
            id="reminder"
            placeholder="reminder"
 
          />
          </div>
          <button className="bg-green-600 text-white font-bold cursor-pointer px-6 py-2">
          {isLoading ? (
            <BeatLoader color={"#ffffff"} loading={isLoading} css={override} size={10} />
          ) : (
            "Enregistrer le rdv"
          )}
          </button>
        </form>
        {/* {messageError.map((message, index) => ()} */}
        {successMessage && <p className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">{successMessage}</p>}
        {errorMessage && <p className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">{errorMessage}</p>}
      </div>
    </div>
    </div>
  );
}
export default RegisterRdvForm;


"Votre_bebe":"","Votre_corps":"","conseils":"","Info":"","Infojumeaux":""
Fatigue ,Mal de dos ,Pas de perte  ,Irritable ,Tout va bien,Crampes, Seins sensibles  ,Mal de tete  , Acne ,Fringales,Insomnie   , Somnolence        ,
    Ecoulement mamelonnaire,
    Mictions frequentes    ,
    Crampes dans les jambes,
    Saignement des gencives,
    Aversion alimentaire   ,
    Appetit accru          ,
    Perte d"apetit         ,
    Nausees                ,
    { src: 'https://th.bing.com/th/id/OIG4.5L7LEXeN62JviM__dcds?pid=ImgGn', desc: 'Brulures d\'estomac         ' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Vomissements' },
    { src: 'https://th.bing.com/th/id/OIG4.Ovs6G3kquUNcrzzmohW4?pid=ImgGn', desc: 'Ballonnements' },
    { src: 'https://th.bing.com/th/id/OIG4.5L7LEXeN62JviM__dcds?pid=ImgGn', desc: 'Constipation' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Diarhee' },
    { src: 'https://th.bing.com/th/id/OIG4.Ovs6G3kquUNcrzzmohW4?pid=ImgGn', desc: 'Digestion normale' },
    { src: 'https://th.bing.com/th/id/OIG4.5L7LEXeN62JviM__dcds?pid=ImgGn', desc: 'Selles normales' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Gonflement des jambes' },
    { src: 'https://th.bing.com/th/id/OIG4.5L7LEXeN62JviM__dcds?pid=ImgGn', desc: 'Gonflement du visage' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Congestion nasale' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Calme' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Heureuse' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Energique' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Enjouee' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Sautes d\'humeur' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Irritable' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Triste' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Angoissee' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Deprimee' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Culpabilite' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Pensees obsessionnelles' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Manque d\'energie' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'L\'ethargique' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Perdue' },
    { src: 'https://th.bing.com/th/id/OIG4.J1Nd40Qkj1loJpw53f0c?pid=ImgGn', desc: 'Tres autocritique' },

// class Home extends React.Component{
//   constructor(props){
//         super(props);
//         this.state = {
//           token: typeof localStorage !== 'undefined' ? localStorage.getItem('access_token') : null
//         };
//       }
    
//   render(){
//     const token = this.state.token
//     // verifylogin(token)
//     // console.log(token)
//     const el = token === null ? (
//         <Accuiel />
//       ):(
//           <EvolutionGrossesseForm/>
//         )

//   return (
//     el
//   )
// }
// }
// export default Home